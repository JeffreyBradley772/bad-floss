// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reviews       FlossReview[]
  comments      Comment[]
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FlossProduct {
  id             String               @id @default(cuid())
  name           String
  brand          String
  description    String?              @db.Text
  type           String               // Traditional, Floss Picks, Eco-Friendly, etc.
  price          Decimal?             @db.Decimal(10, 2)
  imageUrl       String?
  purchaseLinks  ProductPurchaseLink[]
  reviews        FlossReview[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model ProductPurchaseLink {
  id          String        @id @default(cuid())
  productId   String
  product     FlossProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  retailer    String       // Amazon, Walmart, Target, etc.
  url         String
  price       Decimal?     @db.Decimal(10, 2)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([productId])
}

model FlossReview {
  id          String    @id @default(cuid())
  title       String
  productId   String
  product     FlossProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  description String    @db.Text
  rating      Int       @db.SmallInt
  pros        String[]
  cons        String[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([productId])
}

model Comment {
  id           String      @id @default(cuid())
  content      String      @db.Text
  userId       String
  reviewId     String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  review       FlossReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([reviewId])
}
