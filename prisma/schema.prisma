generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id          String      @id
  content     String
  userId      String
  reviewId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  flossReview FlossReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([userId])
}

model Reaction {
  reviewId    String      @map("review_id")
  userId      String      @map("user_id")
  reaction    Int         @db.SmallInt
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")

  flossReview FlossReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([reviewId, userId])
  @@map("review_reactions")
}

model FlossProduct {
  id                  String                @id
  name                String
  brand               String
  shortDescription    String?
  longDescription     String?
  price               Decimal?              @db.Decimal(10, 2)
  msrp                Decimal?              @db.Decimal(10, 2)
  thumbnailImageUrl   String?
  mediumImageUrl      String?
  largeImageUrl       String?
  walmartRating       Decimal?              @db.Decimal(10, 2)
  affiliateUrl        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  flossReview         FlossReview[]
  productPurchaseLink ProductPurchaseLink[]
}

model FlossReview {
  id           String       @id
  title        String
  productId    String
  description  String
  rating       Int          @db.SmallInt
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  comment      Comment[]
  reactions    Reaction[]
  flossProduct FlossProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
}

model ProductPurchaseLink {
  id           String       @id
  productId    String
  retailer     String
  url          String
  price        Decimal?     @db.Decimal(10, 2)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  flossProduct FlossProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  isVerified    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  comment       Comment[]
  flossReview   FlossReview[]
  reactions     Reaction[]
  sessions      Session[]
}
